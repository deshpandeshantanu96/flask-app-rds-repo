name: Build, Push to ECR & Deploy to EKS with Argo CD

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 445567099825.dkr.ecr.us-east-1.amazonaws.com/customer-app
  CLUSTER_NAME: my-cluster-eks-1
  IMAGE_TAG: latest
  ARGOCD_APP_NAME: customer-app
  ARGOCD_SERVER: argocd-server.argocd.svc.cluster.local
  ARGOCD_PORT: 80

jobs:
  build-deploy-test-cleanup:
    runs-on: ubuntu-latest
    steps:
      # --- BUILD AND PUSH TO ECR ---
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        working-directory: ./customer-app


      - name: Tag Docker image for ECR
        run: |
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)
          docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
            $aws_account_id.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Push Docker image to ECR
        run: |
          aws_account_id=$(aws sts get-caller-identity --query Account --output text)
          docker push $aws_account_id.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ARGOCD_APP_NAME }}:${{ env.IMAGE_TAG }}

      # --- DEPLOY TO EKS ---
      - name: Update kubeconfig for EKS
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.CLUSTER_NAME }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin

      - name: Deploy to EKS with kubectl manifests
        run: |
          kubectl apply -f ./customer-app/


      # --- ARGO CD SETUP AND DEPLOYMENT ---
      - name: Install Argo CD (if not installed)
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          if ! kubectl get deploy -n argocd argocd-server > /dev/null 2>&1; then
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          else
            echo "Argo CD already installed."
          fi

      - name: Wait for Argo CD server to be available
        run: |
          kubectl wait --for=condition=available deployment/argocd-server -n argocd --timeout=300s

      - name: Get Argo CD admin password and save to env
        id: get-argo-pass
        run: |
          PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode)
          echo "::add-mask::$PASSWORD"
          echo "ARGOCD_PASSWORD=$PASSWORD" >> $GITHUB_ENV

      - name: Deploy Argo CD Application
        run: |
          kubectl apply -f - <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ${{ env.ARGOCD_APP_NAME }}
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: https://github.com/${{ github.repository }}.git
              targetRevision: HEAD
              path: customer-app
            destination:
              server: https://kubernetes.default.svc
              namespace: default
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
          EOF

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      # 1. Port-forward Argo CD server (background)
      - name: Port-forward Argo CD server
        run: |
          kubectl port-forward svc/argocd-server -n argocd 8080:443 &
          sleep 10  # wait for port-forward to be ready

      # 2. Get Argo CD admin password and export as env
      - name: Get Argo CD admin password
        id: get-argo-pass
        run: |
          PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode)
          echo "::add-mask::$PASSWORD"
          echo "ARGOCD_PASSWORD=$PASSWORD" >> $GITHUB_ENV

      # 3. Login to Argo CD with explicit server address
      - name: Login to Argo CD
        run: |
          argocd login localhost:8080 --insecure --username admin --password ${{ env.ARGOCD_PASSWORD }} --server localhost:8080

      # 4. Sync the Argo CD app with explicit server address
      - name: Sync Argo CD application
        run: |
          argocd app sync ${{ env.ARGOCD_APP_NAME }} --server localhost:8080 --insecure

      # 5. Wait for the Argo CD app health with explicit server address
      - name: Wait for Argo CD app to be healthy
        run: |
          argocd app wait ${{ env.ARGOCD_APP_NAME }} --health --timeout 300 --server localhost:8080 --insecure


      # --- TESTING ---
      - name: Run tests
        run: |
          # Get the LoadBalancer hostname or IP for the service
          APP_URL=$(kubectl get svc fastapi-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          # If hostname is empty, try external IP
          if [ -z "$APP_URL" ]; then
            APP_URL=$(kubectl get svc fastapi-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          fi
          echo "Running tests against http://$APP_URL"
          ./run-tests.sh "http://$APP_URL"

      # --- CLEANUP ---
      - name: Cleanup resources
        if: always()
        run: |
          # Delete Argo CD Application resource
          kubectl delete application ${{ env.ARGOCD_APP_NAME }} -n argocd --ignore-not-found

          # Delete Kubernetes manifests applied for your app
          kubectl delete -f ./customer-app/ --ignore-not-found

          # Optional: Uninstall Argo CD entirely (commented out)
          # kubectl delete -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml || true
