name: Deploy RDS and Load Data

# on:
#   push:
#     branches: [ master ]

on:
  workflow_dispatch:

env:
  AWS_REGION: 'us-east-1'
  TF_VERSION: '1.5.7'
  DB_INSTANCE_IDENTIFIER: 'free-tier-db-${{ github.run_id }}'

jobs:
  deploy-and-load:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Generate random DB password
        id: generate_password
        run: |
          PASSWORD=$(openssl rand -hex 16)
          echo "DB_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          echo "::add-mask::$PASSWORD"

      - name: Create RDS password secret in AWS Secrets Manager
        env:
          AWS_REGION: us-east-1
          SECRET_NAME: fetch_master_password
          SECRET_VALUE: '{"password":$PASSWORD}'  # JSON format
        run: |
          # Check if secret exists
          if aws secretsmanager describe-secret --secret-id "$SECRET_NAME" --region "$AWS_REGION" 2>/dev/null; then
            echo "Secret $SECRET_NAME already exists, updating it..."
            aws secretsmanager put-secret-value --secret-id "$SECRET_NAME" --secret-string "$SECRET_VALUE" --region "$AWS_REGION"
          else
            echo "Creating secret $SECRET_NAME..."
            aws secretsmanager create-secret --name "$SECRET_NAME" --secret-string "$SECRET_VALUE" --region "$AWS_REGION"
          fi


      - name: Terraform Plan
        run: |
          terraform plan \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="db_instance_identifier=${{ env.DB_INSTANCE_IDENTIFIER }}" \
            -var="db_password=${{ env.DB_PASSWORD }}" \
            -var-file="rds.tfvars"
        working-directory: ./terraform

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="db_instance_identifier=${{ env.DB_INSTANCE_IDENTIFIER }}" \
            -var="db_password=${{ env.DB_PASSWORD }}" \
            -var-file="rds.tfvars"
        working-directory: ./terraform

      - name: Save Terraform output to JSON
        run: |
          echo "Saving Terraform outputs to a clean JSON file..."
          terraform output -json > terraform_output.json
        working-directory: ./terraform

      - name: Clean terraform output JSON
        run: |
          # Extract JSON block only (from first { to last })
          sed -n '/^{/,/^}/p' terraform_output.json > terraform_output_clean.json
        working-directory: ./terraform

      - name: Parse Terraform outputs
        id: parse_outputs
        run: |
          echo "Parsing Terraform outputs..."

          # Read the full endpoint (host:port)
          DB_HOST_PORT=$(jq -r '.rds_endpoint.value' terraform_output_clean.json)
          
          # Split into host and port
          DB_HOST=$(echo "$DB_HOST_PORT" | cut -d':' -f1)
          DB_PORT=$(echo "$DB_HOST_PORT" | cut -d':' -f2)

          # Other fields
          DB_USERNAME=$(jq -r '.rds_username.value' terraform_output_clean.json)
          DB_NAME=$(jq -r '.rds_db_name.value' terraform_output_clean.json)

          # Export to GitHub env
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV
          echo "DB_USERNAME=$DB_USERNAME" >> $GITHUB_ENV
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV

          # Optionally: Print masked values for verification
          echo "::add-mask::$DB_HOST"
          echo "::add-mask::$DB_PORT"
          echo "::add-mask::$DB_USERNAME"
        working-directory: ./terraform


      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt

      # - name: Wait for RDS to be available
      #   run: |
      #     echo "Waiting for RDS endpoint to become available..."
      #     export PGPASSWORD=${{ env.DB_PASSWORD }}
      #     until pg_isready -h ${{ env.DB_HOST }} -p ${{ env.DB_PORT }} -U ${{ env.DB_USERNAME }}; do
      #       echo "Waiting for database connection..."
      #       sleep 10
      #     done
      #     echo "Database is now available!"

      - name: Load data into RDS
        env:
          DB_HOST: ${{ env.DB_HOST }}
          DB_USERNAME: ${{ env.DB_USERNAME }}
          RDS_PASSWORD_SECRET_NAME: "fetch_master_password"
          DB_NAME: ${{ env.DB_NAME }}
          DB_PORT: ${{ env.DB_PORT }}
        run: python scripts/load_to_rds.py


        #Code:3