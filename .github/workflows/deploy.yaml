name: Build, Test & Deploy to EKS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: my-eks-cluster-aws-1
  ECR_REPOSITORY: my-flask-app  # Just the repository name, not full URI
  ECR_REGISTRY: 445567099825.dkr.ecr.us-east-1.amazonaws.com  # Separate registry

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4  # Updated to v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

    - name: Push Docker image
      run: |
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

  deploy-to-eks:
  needs: build-test
  runs-on: ubuntu-latest
  steps:
  - uses: actions/checkout@v4

  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v2
    with:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ env.AWS_REGION }}

  - name: Install kubectl
    uses: azure/setup-kubectl@v3

  - name: Configure EKS credentials
    run: |
      aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}

  - name: Deploy to EKS
    env:
      FULL_IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
    run: |
      # Create or update deployment
      if ! kubectl get deployment flask-app -n default; then
        echo "Creating initial deployment..."
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: flask-app
          namespace: default
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: flask-app
          template:
            metadata:
              labels:
                app: flask-app
            spec:
              containers:
              - name: app
                image: $FULL_IMAGE_NAME
                ports:
                - containerPort: 5000
                envFrom:
                - secretRef:
                    name: rds-secret
              imagePullSecrets:
              - name: ecr-credentials
        EOF
        kubectl expose deployment flask-app --port=80 --target-port=5000 --type=LoadBalancer
      else
        echo "Updating existing deployment..."
        kubectl set image deployment/flask-app app=$FULL_IMAGE_NAME -n default
      fi
      
      # Verify deployment
      kubectl rollout status deployment/flask-app -n default
      kubectl get pods,svc -n default

#code: 2