name: Build, Test & Deploy to EKS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: my-eks-cluster-aws-1
  ECR_REPOSITORY: my-flask-app
  ECR_REGISTRY: 445567099825.dkr.ecr.us-east-1.amazonaws.com

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        pip install pytest

    - name: Run tests
      run: |
        pytest tests/ -v || echo "Tests failed"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

    - name: Push Docker image
      run: |
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

  deploy-to-eks:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure EKS credentials
      run: |
        aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Create ECR pull secret
      run: |
        kubectl create secret docker-registry ecr-credentials \
          --docker-server=${{ env.ECR_REGISTRY }} \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password) \
          --namespace=default || echo "Secret may already exist"

    - name: Deploy to EKS
      env:
        FULL_IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
      run: |
        # Apply the deployment manifest
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: flask-app
          namespace: default
        spec:
          progressDeadlineSeconds: 900  # Extend timeout
          replicas: 2
          strategy:
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 1
          selector:
            matchLabels:
              app: flask-app
          template:
            metadata:
              labels:
                app: flask-app
            spec:
              containers:
              - name: app
                image: $FULL_IMAGE_NAME
                ports:
                - containerPort: 5000
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 5
                  periodSeconds: 5
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 15
              imagePullSecrets:
              - name: ecr-credentials
        EOF
        
        # Expose service if needed
        kubectl expose deployment flask-app --port=80 --target-port=5000 --type=LoadBalancer || true
            

  #code:4